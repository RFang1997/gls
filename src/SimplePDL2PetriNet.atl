module SimplePDL2PetriNet;
create OUT: petrinet from  IN: simplepdl;

-- Obtenir le processus qui contient ce process element.
-- Remarque: Ce helper ne serait pas utile si une r�f�rence opposite
-- avait �t� plac�e entre Process et ProcessElement
helper context simplepdl!ProcessElements
def: getProcess(): simplepdl!Process =
	simplepdl!Process.allInstances()
		->select(p | p.processelement->includes(self))
		->asSequence()->first();

-- Traduire un Process en un PetriNet de m�me nom
rule Process2PetriNet {
	from p: simplepdl!Process
	to pn: petrinet!PetriNet (name <- p.name)
}

-- Traduire une WorkDefinition en un motif sur le r�seau de Petri
rule WorkDefinition2PetriNet {
	from wd: simplepdl!WorkDefinition
	to 
		-- PLACES d'une WorkDefinition
		p_ready: petrinet!Place(name <- wd.name + '_ready',marking <- 1),
		p_started: petrinet!Place(name <- wd.name + '_started',marking <- 0),
		p_finished: petrinet!Place(name <- wd.name + '_finished',marking <- 0),
				
		-- TRANSITIONS d'une WorkDefinition
		t_ready_started: petrinet!Transition(name <- wd.name + '_ready_started', min_time<-0,max_time<-0),
		t_started_finished: petrinet!Transition(name <- wd.name + '_started_finished', min_time<-0,max_time<-0),
		
		-- ARCS d'une WorkDefinition
		a_ready_trs: petrinet!Arc(weight<-1,kind<-#normal,source<-p_ready,target<-t_ready_started),
		a_trs_started: petrinet!Arc(weight<-1,kind<-#normal,source<-t_ready_started,target<-p_started),
		a_started_tsf: petrinet!Arc(weight<-1,kind<-#normal,source<-p_started,target<-t_started_finished),
		a_tsf_finished: petrinet!Arc(weight<-1,kind<-#normal,source<-t_started_finished,target<-p_finished)		
}

rule WorkSequence2PetriNet {
	from ws: simplepdl!WorkSequence
	to 
	  a_ws : petrinet!Arc(
	  	
	  	kind<-#read_arc,weight<-1, 
	  	source<-thisModule.resolveTemp(ws.predecessor,
	  			if (ws.linkType = #finishToStart or ws.linkType=#finishToFinish)
	  			 then 'p_finished'+ws.predecessor.name
				 else 'p_started'+ws.predecessor.name
				endif),
		target<-thisModule.resolveTemp(ws.successor,
				if (ws.linkType = #finishToStart or ws.linkType=#startToStart)
	  			 then 't_ready_started'+ws.successor.name
				 else 't_started_finished'+ws.successor.name
				endif) 	
		)
	  			
}

rule Ressource2PetriNet {
	from ressource: simplepdl!Ressource
	to
		p_ressource: petrinet!Place(name <- ressource.name, marking <- ressource.count)
}

--rule Allocation2PetriNet {
--	from allocation: simplepdl!Allocation
--	to
--		a_allocation_source: petrinet!Arc(weight<-1,kind<-#normal,source<-allocation.ressource.name,target<-t_source_target),
--		a_allocation_target: petrinet!Arc(weight<-1,kind<-#normal,source<-t_source_target,target<-p_finished),
--		t_source_target: petrinet!Transition(name <- 'transition_'+allocation.ressource.name+, min_time<-0,max_time<-0)
--}